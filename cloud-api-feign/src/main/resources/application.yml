server:
  port: 8003
spring:
  application:
    name: cloud-openfeign-service
  cloud:
    consul:
      host: 192.168.111.128
      port: 8500
      discovery:
        prefer-ip-address: true
        service-name: ${spring.application.name}
#        heartbeat:
#          enabled: true
    openfeign:
      client:
        config:
          default:
            connectTimeout: 20000
            readTimeout: 20000
      httpclient:
        hc5:
          enabled: true
      circuitbreaker:
        enabled: true
#        group:
#          enabled: true
#开启openfeign自带的日志打印功能固定写法
#logging.level + feign接口全路径+类名 + debug
#并且要配置openfeign日志开启
#logging:
#  level:
#    com:
#      mk:
#        cloud:
#          apis:
#            PayFeignApi: debug


#基于调用次数的熔断配置
#resilience4j:
#  circuitbreaker:
#    configs:
#      default: #默认配置
#        failureRateThreshold: 50 #设置50%的调用失败率，超过时CircuitBreaker会变成OPEN状态
#        slideWindowType: COUNT_BASED #滑动窗口类型
#        slideWindowSize: 6 #滑动窗口的大小配置，COUNT_BASED 6 表示6个请求， 配置 TIME_BASED 6 表示6秒
#        minimumNumberOfCalls: 6 #断路器计算失败率或慢调用次数的最小值
#        automaticTransitionFromOpenToHalfOpenEnabled: true #是否自动把CircuitBreaker的OPEN状态变成HALF半开启状态
#        waitDurationInOpenState: 5s #CircuitBreaker的OPEN状态停留5秒后，自动变成HALF半开启状态
#        permittedNumberOfCallsInHalfOpenState: 2 #CircuitBreaker的HALF半开启状态，允许的请求数
#        recordExceptions:
#          - java.lang.Exception #指定的异常
#      instance:
#        cloud-payment-service:
#          baseConfig: default #这个RPC接口会使用上面的默认配置

#基于时间的熔断配置
#resilience4j:
#  timelimiter:
#    configs:
#      default:
#        timeout-duration: 10s #默认是1s，超过1s就超时异常，如果配置了服务降级就会走服务降级逻辑
#  circuitbreaker:
#    configs:
#      default:
#        failureRateThreshold: 50 #设置50%的调用失败率，超过时CircuitBreaker会变成OPEN状态
#        slowDurationThreshold: 2s #慢调用时间阀值，慢调用2s秒以上，认为是慢调用并增加慢调用比例
#        slowCallRateThreshold: 30 #慢调用百分比峰值，断路器把调用时间大于slowDurationThreshold，视为慢调用，当慢调用比例高于slowCallRateThreshold时，断路器打开，服务降级
#        slidingWindowType: TIME_BASED #滑动窗口类型
#        slidingWindowSize: 2 #滑动窗口的大小位置，配置TIME_BASED表示2s
#        minimumNumberOfCalls: 2 #断路器计算失败率或慢调用次数的最小值
#        permittedNumberOfCallsInHalfOpenState: 2 #CircuitBreaker的HALF半开启状态，允许的请求数
#        waitDurationInOpenState: 5s #CircuitBreaker的OPEN状态停留5秒后，自动变成HALF半开启状态
#        recordExceptions:
#          - java.lang.Exception
#    instances:
#      cloud-payment-service:
#        baseConfig: default

#resilience4j:
#  bulkhead:
#    configs:
#      default:
#        maxConcurrentCalls: 2 #舱壁隔离允许的最大并发数
#        maxWaitDuration: 1000ms #当达到并发数量时，后续的线程访问接口最多等待maxWaitDuration，超时就服务降级
#    instances:
#      cloud-payment-service:
#        baseConfig: default
#  timelimiter:
#    configs:
#      default:
#        timeout-duration: 20s #默认是1s，超过1s就超时异常，如果配置了服务降级就会走服务降级逻辑


# resilienct4j中bulkhead的threadpool配置
#resilience4j:
#  timelimiter:
#    configs:
#      default:
#        timeoutDuration: 20s
#  thread-pool-bulkhead:
#    configs:
#      default:
#        core-pool-size: 1
#        max-pool-size: 1
#        queue-capacity: 1
#    instances:
#      cloud-payment-service:
#      baseConfig: default


#resilience4j的限流
resilience4j:
  ratelimiter:
    configs:
      default:
        limitForPeriod: 2 #在一次刷新周期内，允许执行的最大请求数
        limitRefreshPeriod: 1s #限流器每隔1s刷新一次
        timeout-duration: 1s #线程等待权限的默认超时时间
    instances:
      cloud-payment-service:
        baseConfig: default